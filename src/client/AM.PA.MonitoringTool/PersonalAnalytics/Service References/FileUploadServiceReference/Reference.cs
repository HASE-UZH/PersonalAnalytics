//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonalAnalytics.FileUploadServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileUploadServiceReference.IFileUploader")]
    public interface IFileUploader {
        
        // CODEGEN: Generating message contract since the wrapper name (FileUploadMessage) of message FileUploadMessage does not match the default value (Upload)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploader/Upload", ReplyAction="http://tempuri.org/IFileUploader/UploadResponse")]
        PersonalAnalytics.FileUploadServiceReference.UploadResponse Upload(PersonalAnalytics.FileUploadServiceReference.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploader/Upload", ReplyAction="http://tempuri.org/IFileUploader/UploadResponse")]
        System.Threading.Tasks.Task<PersonalAnalytics.FileUploadServiceReference.UploadResponse> UploadAsync(PersonalAnalytics.FileUploadServiceReference.FileUploadMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string userID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(string FileName, string userID, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.userID = userID;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long DurationOfUpload;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FilePath;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool Success;
        
        public UploadResponse() {
        }
        
        public UploadResponse(long DurationOfUpload, string FilePath, int Length, bool Success) {
            this.DurationOfUpload = DurationOfUpload;
            this.FilePath = FilePath;
            this.Length = Length;
            this.Success = Success;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileUploaderChannel : PersonalAnalytics.FileUploadServiceReference.IFileUploader, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploaderClient : System.ServiceModel.ClientBase<PersonalAnalytics.FileUploadServiceReference.IFileUploader>, PersonalAnalytics.FileUploadServiceReference.IFileUploader {
        
        public FileUploaderClient() {
        }
        
        public FileUploaderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileUploaderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploaderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploaderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PersonalAnalytics.FileUploadServiceReference.UploadResponse PersonalAnalytics.FileUploadServiceReference.IFileUploader.Upload(PersonalAnalytics.FileUploadServiceReference.FileUploadMessage request) {
            return base.Channel.Upload(request);
        }
        
        public long Upload(string FileName, string userID, System.IO.Stream FileByteStream, out string FilePath, out int Length, out bool Success) {
            PersonalAnalytics.FileUploadServiceReference.FileUploadMessage inValue = new PersonalAnalytics.FileUploadServiceReference.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.userID = userID;
            inValue.FileByteStream = FileByteStream;
            PersonalAnalytics.FileUploadServiceReference.UploadResponse retVal = ((PersonalAnalytics.FileUploadServiceReference.IFileUploader)(this)).Upload(inValue);
            FilePath = retVal.FilePath;
            Length = retVal.Length;
            Success = retVal.Success;
            return retVal.DurationOfUpload;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<PersonalAnalytics.FileUploadServiceReference.UploadResponse> PersonalAnalytics.FileUploadServiceReference.IFileUploader.UploadAsync(PersonalAnalytics.FileUploadServiceReference.FileUploadMessage request) {
            return base.Channel.UploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<PersonalAnalytics.FileUploadServiceReference.UploadResponse> UploadAsync(string FileName, string userID, System.IO.Stream FileByteStream) {
            PersonalAnalytics.FileUploadServiceReference.FileUploadMessage inValue = new PersonalAnalytics.FileUploadServiceReference.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.userID = userID;
            inValue.FileByteStream = FileByteStream;
            return ((PersonalAnalytics.FileUploadServiceReference.IFileUploader)(this)).UploadAsync(inValue);
        }
    }
}
