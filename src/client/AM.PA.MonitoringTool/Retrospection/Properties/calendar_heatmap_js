// Origin library: https://github.com/DKirwan/calendar-heatmap
// Sept 2016 Monica Trink: Customized parts of the lib due to different kinds of visualizations (weekly, monthly)
//
function calendarHeatmap() {
  // defaults
  var width = 150; //MONICA CHANGE PREV 350
  var height = 180; //MONICA change prev 110
  var legendWidth = 150; //MONICA CHANGE, PREV: 150
  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  var daysShortForWeekMode = ['M', 'T', 'W', 'T', 'F', 'S', 'S']; //customized by monica
  var selector = 'body';
  var SQUARE_LENGTH = 22; //MONICA CHANGE, PREV: 150
  var SQUARE_PADDING = 2;
  var MONTH_LABEL_PADDING = 2; //MONICA CHANGE prev 6
  var endDate = moment().endOf('day').toDate();
  var beginDate = moment().startOf('day').subtract(1, 'month').toDate(); //MONICA CHANGE REFACTOR
  var data = [];
  var colorRange = ['#D8E6E7', '#218380'];
  var tooltipEnabled = true;
  var tooltipUnit = 'contribution';
  var legendEnabled = true;
  var onClick = null;
  var mode = 'MONTH';

  // setters and getters
  chart.data = function (value) {
    if (!arguments.length) { return data; }
    data = value;
    return chart;
  };

  chart.selector = function (value) {
    if (!arguments.length) { return selector; }
    selector = value;
    return chart;
  };

  chart.colorRange = function (value) {
    if (!arguments.length) { return colorRange; }
    colorRange = value;
    return chart;
  };

  chart.tooltipEnabled = function (value) {
    if (!arguments.length) { return tooltipEnabled; }
    tooltipEnabled = value;
    return chart;
  };

  chart.tooltipUnit = function (value) {
    if (!arguments.length) { return tooltipUnit; }
    tooltipUnit = value;
    return chart;
  };

  chart.legendEnabled = function (value) {
    if (!arguments.length) { return legendEnabled; }
    legendEnabled = value;
    return chart;
  };

  chart.onClick = function (value) {
    if (!arguments.length) { return onClick(); }
    onClick = value;
    return chart;
  };

  chart.begin = function (value) {
    if (!arguments.length) { return beginDate; }
    beginDate = value;
    return chart;
  };

  chart.end = function (value) {
    if (!arguments.length) { return endDate; }
    endDate = value;
    return chart;
  };

  chart.mode = function (value) {
    if (!arguments.length) { return mode; }
    mode = value;
    return chart;
  };

  function chart() {

    d3.select(chart.selector()).selectAll('svg.calendar-heatmap').remove(); // remove the existing chart, if it exists

    var dateRange = d3.time.days(beginDate, moment(endDate).endOf('day').toDate()); // generates an array of date objects within the specified range
    var monthRange = d3.time.months(moment(beginDate).startOf('month').toDate(), endDate); // it ignores the first month if the 1st date is after the start of the month
    var firstDate = moment(dateRange[0]);
	var min = 0;
	var max = 1;    	
    // color range
    var color = d3.scale.linear()
      .range(chart.colorRange())
      .domain([min, max]);

    var tooltip;
    var dayRects;

    drawChart();

	//customized by monica
    function drawChart() {
      var svg = d3.select(chart.selector())
        .append('svg')
        .attr('width', function(){
			if(mode === 'WEEK') {
				return 250;
			}else {
				return width;
			}
		})
        .attr('class', 'calendar-heatmap')
        .attr('height', function(){
			if(mode === 'WEEK') {
				return 50;
			}else {
				return height;
			}		
		})
        .style('padding', '26px 26px 16px 26px'); //customized by monica

      dayRects = svg.selectAll('.day-cell')
        .data(dateRange);  //  array of days for the last yr

	  //customized by monica
      dayRects.enter().append('rect')
        .attr('class', 'day-cell')
        .attr('width', SQUARE_LENGTH)
        .attr('height', SQUARE_LENGTH)
        .attr('fill', 'gray')
        .attr('x', function (d, i) {
	      var cellDate = moment(d);
		  var result;
		  if(mode === 'WEEK') {
		    if(d.getDay() === 0) {
				day = 7; //necessary to position sunday at the bottom of the week
			}else {
				day = d.getDay();
			}

			return MONTH_LABEL_PADDING + day * (SQUARE_LENGTH + SQUARE_PADDING);

		  }else {
	        result = cellDate.week() - firstDate.week() + (firstDate.weeksInYear() * (cellDate.weekYear() - firstDate.weekYear()));		
			return result * (SQUARE_LENGTH + SQUARE_PADDING);  
		  }
          
        })
        .attr('y', function (d, i) { 
		  var day = 0;
		  if(mode === 'WEEK') {
		   return 0;
		  }else {
	        day = d.getDay();	  
		    return  MONTH_LABEL_PADDING + day * (SQUARE_LENGTH + SQUARE_PADDING); 
		  }

		});

      if (typeof onClick === 'function') {
        dayRects.on('click', function (d) {
          var count = countForDate(d);
          onClick({ date: d, count: count });
        });
      }

      if (chart.tooltipEnabled()) {
        dayRects.on('mouseover', function (d, i) {
          tooltip = d3.select(chart.selector())
            .append('div')
            .attr('class', 'day-cell-tooltip')
            .html(tooltipHTMLForDate(d))
//            .style('left', function () { return Math.floor(i / 7) * SQUARE_LENGTH + 'px'; })
            .style('top', function () { return d.getDay() * (SQUARE_LENGTH + SQUARE_PADDING) + MONTH_LABEL_PADDING * 3 + 'px'; });
        })
        .on('mouseout', function (d, i) {
          tooltip.remove();
        });
      }

    if (chart.legendEnabled()) {
		if(min === 0) {
        		var colorRange = [color(0)];
        		for (var i = 3; i > 0; i--) {
          			colorRange.push(color(max / i));
        		}
		}else{
        		var colorRange = [color(min)];t
        		for (var i = 3; i > 0; i--) {
          			colorRange.push(color((max-min) / i + min));
        		}
	}


        var legendGroup = svg.append('g');
        legendGroup.selectAll('.calendar-heatmap-legend')
            .data(colorRange)
            .enter()
            .append('rect')
            .attr('class', 'calendar-heatmap-legend')
            .attr('width', SQUARE_LENGTH/2)
            .attr('height', SQUARE_LENGTH/2)
            .attr('x', function (d, i) { if(mode === 'WEEK') {return (width - legendWidth - 48) + (i + 1) * 24;} else{ return (width - legendWidth) + (i + 1) * 13; } }) // customized by monica
            .attr('y', function() {if(mode === 'WEEK') { return 2*SQUARE_LENGTH + SQUARE_PADDING;} else {return height + SQUARE_PADDING; } }) // customized by monica
            .attr('fill', function (d) { return d; });

        legendGroup.append('text')
          .attr('class', 'calendar-heatmap-legend-text')
          .attr('x', function() { if(mode === 'WEEK') {return (width - legendWidth - 48) + (i + 1) * 24;} else{ return (width - legendWidth) + (i + 1) * 13; } }) // customized by monica
          .attr('y', function() { if(mode === 'WEEK') {return 1.5*SQUARE_LENGTH + SQUARE_PADDING}else{return height + SQUARE_PADDING-3} }) // customized by monica
          .text('Less');

        legendGroup.append('text')
          .attr('class', 'calendar-heatmap-legend-text')
          .attr('x', function() { if(mode === 'WEEK') {return ((width - legendWidth - 48) + (i + 1) * 24) + 70;} else{ return ((width - legendWidth) + (i + 1) * 13) + 50; } }) // customized by monica
          .attr('y', function() { if(mode === 'WEEK') {return 1.5*SQUARE_LENGTH + SQUARE_PADDING}else{ return height + SQUARE_PADDING-3 } }) // customized by monica
          .text('More');
      }

      dayRects.exit().remove();

	  //customized by monica
	  if(mode === 'MONTH') {
      var monthLabels = svg.selectAll('.month')
          .data(monthRange)
          .enter().append('text')
          .attr('class', 'month-name')
          .style()
          .text(function (d) {
		    if(mode === 'WEEK' && $('.month-name').text().length > 0) {
			  return 'and ' + months[d.getMonth()]; //if at the end of the month we show e.g., Sept and Oct as header
			} else {
              return months[d.getMonth()];
			}
          })
          .attr('x', function (d, i) {
            var matchIndex = 0;
            dateRange.find(function (element, index) {
              matchIndex = index;
              return moment(d).isSame(element, 'month') && moment(d).isSame(element, 'year');
            });

			if(mode === 'WEEK' && matchIndex > 0){
			  return (SQUARE_LENGTH + SQUARE_PADDING);				
			}else {
              return Math.floor(matchIndex / 7) * (SQUARE_LENGTH + SQUARE_PADDING);			
			}
          })
          .attr('y', 0);  // fix these to the top
		  }

	//customized by monica
	  if(mode === 'WEEK'){
		daysShortForWeekMode.forEach(function (day, index) {
		  var i = 0;
		  if(index === 0) {
			i = 7;
		  } else {
			i = index;		  
		  }

          svg.append('text')
            .attr('class', 'day-initial')
            .attr('transform', 'translate(' + (SQUARE_LENGTH + 4) * (index + 1) + ', -10)')
            .style('text-anchor', 'middle')
			.attr('dx', '2')
            .text(day);
		});
	  }else {
		  days.forEach(function (day, index) {
			if (index % 2) {
			  svg.append('text')
				.attr('class', 'day-initial')
				.attr('transform', 'translate(-17,' + (SQUARE_LENGTH) * (index + 1) + ')') //customized by monica
				.style('text-anchor', 'middle')
				.attr('dy', '2')
				.text(day);
			}
		  });	  
	  
	  }
    }

	//Customized by Monica
    function tooltipHTMLForDate(d) {
      var dateStr = moment(d).format('ddd, MMM Do YYYY');
      var count = countForDate(d);
	  var info = extraInfoForDate(d);
	  if(count && tooltipUnit === 'Avg EEG Indices') {
	   count = (Math.round(count * 100)/100).toFixed(2); //http://stackoverflow.com/questions/4098685/rounding-numbers-to-2-digits-after-comma
	  }
      return '<span>On ' + dateStr + '<br>' + (count ? count : 'No') + ' ' + tooltipUnit + '</span><br>' +  '<span>' + (info ? JSON.parse(info).switches + ' switches' : "") + '</span>' + '<br>' + '<span>' + (info ? 'Top programs: ' + JSON.parse(info).topPgms : "") + '</span>';
    }

	//Customized by Monica
    function countForDate(d) {
      var count = 0;
      var match = chart.data().find(function (element, index) {
        return moment(element.date).isSame(d, 'day');
      });
      if (match) {
        count = match.tp.original;
      }
      return count;
    }

	//Newly created by Monica
    function extraInfoForDate(d) {
      var info = 0;
      var match = chart.data().find(function (element, index) {
        return moment(element.date).isSame(d, 'day');
      });
      if (match) {
        info = match.tp.extra_info;
      }
      return info;
    }

    var daysOfChart = chart.data().map(function (day) {
      return day.date.toDateString();
    });

	//customized by monica
    dayRects.filter(function (d) {
      return daysOfChart.indexOf(d.toDateString()) > -1;
    }).attr('fill', function (d, i) {
       return color(chart.data()[i].count);
    });
  }

  return chart;
}


// polyfill for Array.find() method
/* jshint ignore:start */
if (!Array.prototype.find) {
  Array.prototype.find = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
}
/* jshint ignore:end */